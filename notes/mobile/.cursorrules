# Card Quest - React Native Game Project Rules

## üìö Project Overview

This is a React Native card game built with modern technologies and best practices.

## üõ† Technology Stack & File Locations

### Core Framework

- **React Native (0.79.3)**: Cross-platform mobile development framework
- **Expo (~53.0.10)**: Development platform and build tools
  - Configuration: `app.json`, `index.ts`
  - Assets: `@/assets/`
  - Always start, restart, or stop the app from '/app' folder, otherwise it will not work

### TypeScript

- **TypeScript (~5.8.3)**: Type safety and better development experience
  - Configuration: `tsconfig.json`
  - Global types: `global.d.ts`
  - Type definitions: `@/src/types/`

### State Management

- **Redux Toolkit (^2.8.2)**: Modern Redux with simplified syntax
- **React Redux (^9.2.0)**: React bindings for Redux
  - Store configuration: `@/src/store/index.ts`
  - Game state: `@/src/store/gameSlice.ts`
  - Cards management: `@/src/store/cardsSlice.ts`
  - Player data: `@/src/store/playerSlice.ts`

### GraphQL

- **Apollo Client (^3.13.8)**: GraphQL client with caching
- **GraphQL (^16.11.0)**: Query language for APIs
  - Client setup: `@/src/graphql/client.ts`
  - Future queries/mutations: `@/src/graphql/`

### Navigation

- **React Navigation**: Screen navigation and routing
  - Native: `@react-navigation/native (^7.1.10)`
  - Stack: `@react-navigation/stack (^7.3.3)`
  - Bottom Tabs: `@react-navigation/bottom-tabs (^7.3.14)`
  - Setup: `App.tsx`

### UI & Styling

- **React Native Paper (^5.14.5)**: Material Design components
- **NativeWind (2.0.11)**: Tailwind CSS for React Native - **STABLE VERSION**
- **Tailwind CSS (3.3.0)**: Utility-first CSS framework
  - Configuration: `tailwind.config.js`
  - Babel setup: `babel.config.js`
- **Expo Linear Gradient (^14.1.5)**: Gradient backgrounds

### Camera & QR Scanning

- **Expo Camera (^16.1.7)**: Camera access and QR code scanning
  - Permissions configured in `app.json`
  - Usage: `@/src/screens/ScannerScreen.tsx`

### Animation & Gestures
- **React Native Reanimated**: High-performance animations running on UI thread
- **React Native Gesture Handler**: Advanced gesture recognition and handling
  - Usage: `@/src/components/AnimatedCard.tsx`
  - Setup: `babel.config.js`, `App.tsx` with GestureHandlerRootView

### Utilities

- **React Native Vector Icons (^10.2.0)**: Icon library
- **React Native SVG (15.11.2)**: SVG support
- **React Native Safe Area Context (5.4.0)**: Safe area handling

## üìÅ Project Structure

```
src/
‚îú‚îÄ‚îÄ components/          # Reusable UI components
‚îú‚îÄ‚îÄ screens/            # Screen components
‚îÇ   ‚îú‚îÄ‚îÄ HomeScreen.tsx     # Main dashboard
‚îÇ   ‚îú‚îÄ‚îÄ CardsScreen.tsx    # Card collection browser
‚îÇ   ‚îú‚îÄ‚îÄ ScannerScreen.tsx  # QR code scanner
‚îÇ   ‚îî‚îÄ‚îÄ GameScreen.tsx     # Battle gameplay
‚îú‚îÄ‚îÄ store/              # Redux state management
‚îÇ   ‚îú‚îÄ‚îÄ index.ts           # Store configuration
‚îÇ   ‚îú‚îÄ‚îÄ gameSlice.ts       # Game state (health, turns, battles)
‚îÇ   ‚îú‚îÄ‚îÄ cardsSlice.ts      # Cards collection and deck
‚îÇ   ‚îî‚îÄ‚îÄ playerSlice.ts     # Player stats and progression
‚îú‚îÄ‚îÄ types/              # TypeScript type definitions
‚îÇ   ‚îî‚îÄ‚îÄ Card.ts            # Card and game interfaces
‚îú‚îÄ‚îÄ utils/              # Utility functions and data
‚îÇ   ‚îî‚îÄ‚îÄ sampleCards.ts     # Initial card data
‚îî‚îÄ‚îÄ graphql/            # GraphQL client and operations
    ‚îî‚îÄ‚îÄ client.ts          # Apollo Client setup
```

## üéØ Component Development Rules

### Props Management - CRITICAL RULES

1. **Use TypeScript interfaces for all props**:

   ```typescript
   interface ComponentProps {
     title: string;
     onPress: () => void;
     isLoading?: boolean;
   }
   ```

2. **Avoid prop drilling - Use Redux for shared state**:

   - Player data: Use `useSelector` to access player state
   - Game state: Use `useSelector` for battle state
   - Cards: Use `useSelector` for collection data
   - Actions: Use `useDispatch` for state updates

3. **Limit component props to 5 or fewer**:

   - If more than 5 props, consider breaking into smaller components
   - Use configuration objects for complex props
   - Leverage Redux for global state instead of passing props

4. **Use composition over prop passing**:

   ```typescript
   // ‚ùå Avoid - too many props
   <CardComponent id={id} name={name} type={type} rarity={rarity} attack={attack} defense={defense} />

   // ‚úÖ Preferred - pass object or use Redux
   <CardComponent card={card} />
   // OR
   const card = useSelector(state => selectCardById(state, cardId));
   ```

5. **Navigation props pattern**:
   ```typescript
   interface ScreenProps {
     navigation: any; // Keep simple for now, can be typed later
     route?: any;
   }
   ```

### Redux Usage Guidelines

1. **Always use typed selectors**:

   ```typescript
   const gameState = useSelector((state: RootState) => state.game);
   const cards = useSelector((state: RootState) => state.cards.collection);
   ```

2. **Use typed dispatch**:

   ```typescript
   const dispatch = useDispatch<AppDispatch>();
   ```

3. **Prefer Redux for**:
   - Player statistics and level
   - Card collection and deck state
   - Game battle state
   - Any data shared between screens

### Styling Rules

1. **Use NativeWind classes when possible**:

   ```typescript
   <View className="flex-1 justify-center items-center">
   ```

2. **Fall back to style prop for complex styling**:

   ```typescript
   <View style={{ backgroundColor: 'rgba(255,255,255,0.1)' }}>
   ```

3. **Use React Native Paper components for Material Design**:
   ```typescript
   <Button mode="contained" onPress={handlePress}>
   ```

### File Naming Conventions

- Screens: `ScreenName.tsx` (PascalCase)
- Components: `ComponentName.tsx` (PascalCase)
- Types: `TypeName.ts` (PascalCase)
- Utils: `utilityName.ts` (camelCase)
- Redux: `sliceName.ts` (camelCase)

### Import Order

1. React and React Native imports
2. Third-party libraries
3. Local components and utilities
4. Type imports (use `import type` when possible)

## üîß Development Guidelines

### Error Handling

- Always handle camera permissions gracefully
- Provide fallback UI for failed QR scans
- Use try-catch for async operations

### Performance

- Use `useCallback` for event handlers passed as props
- Use `useMemo` for expensive calculations
- Avoid inline functions in render methods

### Code Quality

- No unused imports or variables
- Use meaningful variable and function names
- Add TypeScript types for all function parameters and return values
- Keep functions focused and single-purpose

### Testing Considerations

- Write components to be easily testable
- Separate business logic from UI components
- Use dependency injection for external services

## üöÄ Available Scripts

- `npm start`: Start Expo development server
- `npm run android`: Run on Android emulator
- `npm run ios`: Run on iOS simulator
- `npm run web`: Run in web browser

## üì± Development Workflow

1. Start with `npm start`
2. Use Expo Go app on your phone for testing
3. Check Redux DevTools for state management
4. Use React Native Debugger for advanced debugging

Remember: Keep components simple, use Redux for shared state, and follow TypeScript best practices!

## üé® Animation & Gesture Guidelines

### Basic Animation Patterns
```typescript
// 1. Use useSharedValue for animated values
const translateX = useSharedValue(0);
const scale = useSharedValue(1);

// 2. Apply animations with withSpring/withTiming
scale.value = withSpring(1.1);
translateY.value = withTiming(0, { duration: 500 });

// 3. Use useAnimatedStyle for style interpolation
const animatedStyle = useAnimatedStyle(() => ({
  transform: [{ translateX: translateX.value }, { scale: scale.value }],
}));
```

### Gesture Implementation
```typescript
// 4. Implement gestures with GestureDetector
<GestureDetector gesture={panGesture}>
  <Animated.View style={animatedStyle}>

// 5. Use runOnJS for Redux dispatch in animations
onEnd: () => {
  runOnJS(dispatch)(someAction());
}
```

### Performance Best Practices
- **Run animations on UI thread with Reanimated**
- **Use withSpring for natural, bouncy animations**
- **Use withTiming for precise, controlled animations**
- **Combine gestures with Redux state management**
- **Always wrap app with GestureHandlerRootView**
- **Use Animated.View instead of View for animated components**
